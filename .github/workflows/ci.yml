name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  quality:
    name: Qualité du code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"
          cache: true

      - name: Installation des outils
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/go-delve/delve/cmd/dlv@latest

      - name: Formatage du code
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code non formaté. Exécutez 'go fmt ./...'"
            gofmt -s -d .
            exit 1
          fi
          echo "✅ Code correctement formaté"

      - name: Vérification statique
        run: go vet ./...

      - name: Linting
        run: staticcheck ./...

      - name: Tests
        run: go test ./...

      - name: Tests avec détection de race conditions
        run: go test -race ./...

      - name: Tests avec couverture
        run: |
          coverage=$(go test -cover ./... | grep -o '[0-9.]*%' | tail -1 | sed 's/%//')
          echo "Couverture: ${coverage}%"
          if (( $(echo "$coverage < 60" | bc -l) )); then
            echo "❌ Couverture insuffisante: ${coverage}% < 60%"
            exit 1
          fi
          echo "✅ Couverture suffisante: ${coverage}%"

      - name: Compilation
        run: go build -o bin/server ./cmd/server

      - name: Vérification des binaires
        run: |
          if [ -f "bin/server" ]; then
            echo "✅ Serveur compilé avec succès"
            ls -la bin/
          else
            echo "❌ Échec de la compilation"
            exit 1
          fi
